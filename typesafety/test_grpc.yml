- case: grpc_basic
  main: |
    from grpc import Channel, Server

    reveal_type(Channel())  # N: Revealed type is "grpc.Channel"
    reveal_type(Server())   # N: Revealed type is "grpc.Server"

- case: grpc_aio
  main: |
    from grpc.aio import Channel, Server

    reveal_type(Channel())  # N: Revealed type is "grpc.aio.Channel"
    reveal_type(Server())   # N: Revealed type is "grpc.aio.Server"

- case: grpc_status
  main: |
    from grpc import Status
    from grpc_status import to_status

    # XXX: to_status actually expects a "google.rpc.status.Status",
    # but I haven't set up the stubs properly for that yet.
    status: Status = to_status(None)

- case: grpc_channel_options
  main: |
    import grpc

    reveal_type(grpc.insecure_channel("target", ()))  # N: Revealed type is "grpc.Channel"
    reveal_type(grpc.insecure_channel("target", (("a", "b"),)))  # N: Revealed type is "grpc.Channel"
    reveal_type(grpc.insecure_channel("target", (("a", "b"), ("c", "d"))))  # N: Revealed type is "grpc.Channel"

- case: grpc_channel_options_supports_list
  main: |
    import grpc

    grpc.insecure_channel("target", [])
    grpc.insecure_channel("target", [("a", "b"),])
    grpc.insecure_channel("target", [("a", "b"), ("c", "d")])

- case: local_channel_credentials
  main: |
    import grpc

    creds = grpc.local_channel_credentials(grpc.LocalConnectionType.LOCAL_TCP)
    reveal_type(creds)  # N: Revealed type is "grpc.ChannelCredentials"

- case: client_call_details_optionals
  main: |
    import grpc

    creds = grpc.ClientCallDetails()
    reveal_type(creds.method)  # N: Revealed type is "builtins.str"
    reveal_type(creds.timeout)  # N: Revealed type is "Union[builtins.float, None]"

- case: service_context_abort
  main: |
    import grpc

    ctx = grpc.ServicerContext()
    reveal_type(ctx.abort(grpc.StatusCode.OK, "msg"))  # N: Revealed type is "<nothing>"
    reveal_type(ctx.abort_with_status(grpc.Status()))  # N: Revealed type is "<nothing>"

- case: call_iterator_pr10
  main: |
    import grpc
    import typing as t

    call_iter: grpc.CallIterator[str] = t.cast(t.Any, None)
    for call in call_iter:
      pass
    reveal_type(call)  # N: Revealed type is "builtins.str"

- case: alts_credentials
  main: |
    import grpc

    reveal_type(grpc.alts_channel_credentials())  # N: Revealed type is "grpc.ChannelCredentials"
    reveal_type(grpc.alts_server_credentials())  # N: Revealed type is "grpc.ServerCredentials"
    reveal_type(grpc.compute_engine_channel_credentials())  # N: Revealed type is "grpc.ChannelCredentials"

- case: insecure_credentials
  main: |
    import grpc

    reveal_type(grpc.insecure_server_credentials())  # N: Revealed type is "grpc.ServerCredentials"

- case: xds_credentials
  main: |
    import grpc

    creds = grpc.xds_channel_credentials(grpc.local_channel_credentials(grpc.LocalConnectionType.LOCAL_TCP))
    reveal_type(creds)  # N: Revealed type is "grpc.ChannelCredentials"
    screds = grpc.xds_server_credentials(grpc.insecure_server_credentials())
    reveal_type(screds)  # N: Revealed type is "grpc.ServerCredentials"

- case: multi_callable
  main: |
    import grpc

    class DummyRequest:
      pass

    class DummyReply:
      pass

    class DummyServiceStub:
      UnaryUnary: grpc.UnaryUnaryMultiCallable[DummyRequest, DummyReply]
      UnaryStream: grpc.UnaryStreamMultiCallable[DummyRequest, DummyReply]
      StreamUnary: grpc.StreamUnaryMultiCallable[DummyRequest, DummyReply]
      StreamStream: grpc.StreamStreamMultiCallable[DummyRequest, DummyReply]

    stub = DummyServiceStub()
    req = DummyRequest()

    reveal_type(stub.UnaryUnary(req))  # N: Revealed type is "main.DummyReply"

    for resp in stub.UnaryStream(req):
      pass
    reveal_type(resp)  # N: Revealed type is "main.DummyReply"

    reveal_type(stub.StreamUnary(iter([req])))  # N: Revealed type is "main.DummyReply"

    for resp in stub.StreamStream(iter([req])):
      pass
    reveal_type(resp)  # N: Revealed type is "main.DummyReply"

- case: aio_multi_callable
  main: |
    import grpc.aio

    class DummyRequest:
      pass

    class DummyReply:
      pass

    class DummyServiceStub:
      UnaryUnary: grpc.aio.UnaryUnaryMultiCallable[DummyRequest, DummyReply]
      UnaryStream: grpc.aio.UnaryStreamMultiCallable[DummyRequest, DummyReply]
      StreamUnary: grpc.aio.StreamUnaryMultiCallable[DummyRequest, DummyReply]
      StreamStream: grpc.aio.StreamStreamMultiCallable[DummyRequest, DummyReply]

    stub = DummyServiceStub()
    req = DummyRequest()

    async def async_context() -> None:
      reveal_type(await stub.UnaryUnary(req))  # N: Revealed type is "main.DummyReply"

      async for resp in stub.UnaryStream(req):
        pass
      reveal_type(resp)  # N: Revealed type is "main.DummyReply"

      reveal_type(await stub.StreamUnary(iter([req])))  # N: Revealed type is "main.DummyReply"

      async for resp in stub.StreamStream(iter([req])):
        pass
      reveal_type(resp)  # N: Revealed type is "main.DummyReply"

- case: aio_interceptors_casts
  main: |
    import typing
    import grpc.aio

    client_interceptors = [typing.cast(grpc.aio.ClientInterceptor, "interceptor")]
    grpc.aio.insecure_channel("target", interceptors=client_interceptors)

    server_interceptors = [typing.cast(grpc.aio.ServerInterceptor, "interceptor")]
    grpc.aio.server(interceptors=server_interceptors)

- case: service_rpc_handler_inheritance
  main: |
    import typing
    import grpc

    class Request: pass
    class Response: pass

    def unary_unary_call(rq: Request, ctx: grpc.ServicerContext) -> Response:
      reveal_type(rq)  # N: Revealed type is "main.Request"
      return Response()

    class ServiceHandler(grpc.ServiceRpcHandler[Request, Response]):
      def service(self, handler_call_details: grpc.HandlerCallDetails) -> typing.Optional[grpc.RpcMethodHandler[Request, Response]]:
        rpc = grpc.RpcMethodHandler[Request, Response]()
        rpc.unary_unary = unary_unary_call
        return rpc

    h = ServiceHandler()
    ctx = grpc.ServicerContext()
    svc = h.service(grpc.HandlerCallDetails())
    if svc is not None and svc.unary_unary is not None:
      svc.unary_unary(Request(), ctx)

- case: issue_35_missing_aio_types
  main: |
    from grpc.aio import (
      UnaryUnaryClientInterceptor,
      UnaryStreamClientInterceptor,
      StreamUnaryClientInterceptor,
      StreamStreamClientInterceptor,
      AioRpcError,
      ClientCallDetails,
      Channel,
      Server,
      ServicerContext,
    )
    reveal_type(Channel())  # N: Revealed type is "grpc.aio.Channel"

- case: issue_38_reflection_grpc_server
  main: |
    import typing
    import grpc
    from grpc_reflection.v1alpha.reflection import enable_server_reflection
    server = typing.cast(grpc.Server, None)
    enable_server_reflection(["foo"], server, None)

- case: issue_38_reflection_aio_server
  main: |
    import typing
    from grpc import aio
    from grpc_reflection.v1alpha.reflection import enable_server_reflection
    server = typing.cast(aio.Server, None)
    enable_server_reflection(["foo"], server, None)

- case: issue_41_stream_multi_callable_type_unary
  main: |
    import grpc
    import typing
    def unary_stream() -> grpc.UnaryStreamMultiCallable[int, int]:
      return typing.cast(grpc.UnaryStreamMultiCallable[int, int], None)

    stream = unary_stream()
    stream.initial_metadata()
    if stream.done() and stream.exception() is not None:
      ex = stream.exception()
      reveal_type(ex)  # N: Revealed type is "Union[builtins.Exception, None]"

- case: issue_41_stream_multi_callable_type_stream
  main: |
    import grpc
    import typing
    def stream_stream() -> grpc.StreamStreamMultiCallable[int, int]:
      return typing.cast(grpc.StreamStreamMultiCallable[int, int], None)

    stream = stream_stream()
    stream.initial_metadata()
    if stream.done() and stream.exception() is not None:
      ex = stream.exception()
      reveal_type(ex)  # N: Revealed type is "Union[builtins.Exception, None]"

